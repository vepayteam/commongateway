<?php


namespace app\modules\partner\controllers;


use app\models\bank\TCBank;
use app\models\partner\order\SpecialOrders;
use app\models\partner\PartUserAccess;
use app\models\partner\UserLk;
use app\models\sms\api\SingleMainSms;
use app\models\sms\ConfirmCode;
use app\models\sms\ExecuteOrders;
use app\models\sms\Message;
use app\models\sms\PaymentOrders;
use app\models\sms\Stop;
use app\models\sms\tables\Sms;
use Yii;
use yii\filters\AccessControl;
use yii\helpers\Url;
use yii\helpers\VarDumper;
use yii\web\Controller;
use yii\web\Response;

class PaymentOrdersController extends Controller
{
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'rules' => [
                    [
                        'allow' => false,
                        'roles' => ['?'],
                    ],
                    [
                        'allow' => false,
                        'roles' => ['@'],
                        'denyCallback' => function ($rule, $action) {
                            Yii::$app->getResponse()->redirect(Url::toRoute('/partner'), 302)->send();
                            return false;
                        },
                        'matchCallback' => function ($rule, $action) {
                            return !(UserLk::IsAdmin(Yii::$app->user) == true ||
                                PartUserAccess::checkRazdelAccess(Yii::$app->user, $action) == true ||
                                UserLk::IsMfo(Yii::$app->user));
                        }
                    ],
                    [
                        'allow' => true,
                        'roles' => ['@'],
                        'denyCallback' => function ($rule, $action) {
                            Yii::$app->getResponse()->redirect(Url::toRoute('/partner'), 302)->send();
                            return false;
                        }
                    ],
                ],
            ],
        ];
    }

    public function actionList()
    {
        $orders = new SpecialOrders(Yii::$app->user->identity->getPartner());
        return $this->render('list', compact('orders'));
    }

    /**
     * Читать с середины в верх.
     */
    public function actionExecuteOrders()
    {
        Yii::$app->response->format = Response::FORMAT_JSON;
        if (Yii::$app->request->isAjax) {
            $sms =
                SingleMainSms::buidWithMessage(
                    Message::buildAjax( //тут при проверке номера вернуть стоп в конструкторе.
                        PaymentOrders::buildAjax('AjaxForm')->models()
                    )
                );
            $sms->send();
        }
    }

    public function actionConfirmCode()
    {
        Yii::$app->response->format = Response::FORMAT_JSON;
        if (Yii::$app->request->isAjax) {
            $orders =
                ExecuteOrders::buildAjax(
                    ConfirmCode::buildAjax(Yii::$app->request->post('code'))
                );
            $orders->execute();
            if ($orders->successful()) {
                Stop::app(200, $orders->successfulMessage());
            }
        }
    }

    //отключить после тестирования.
    public function beforeAction($action)
    {
        $this->enableCsrfValidation = false;
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }
}