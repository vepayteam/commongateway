<?php


namespace app\models\partner\order;

use app\models\partner\UserLk;
use app\models\payonline\OrderNotif;
use app\models\payonline\OrderPay;
use Yii;
use yii\base\Model;
use yii\data\SqlDataProvider;
use yii\db\Query;

class OrderStat extends Model
{
    public $datefrom;
    public $dateto;
    public $partner = -1;
    public $status = -1;

    public function rules()
    {
        return [
            [['partner'], 'integer'],
            [['datefrom', 'dateto'], 'date', 'format' => 'php:d.m.Y'],
            [['datefrom', 'dateto'], 'required'],
            ['status', 'each', 'rule'=>['string']]
        ];
    }

    public function beforeValidate()
    {
        if(is_string($this->status) or is_int($this->status)){
            $this->status = [(string)$this->status];
        }
        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }

    public function afterValidate()
    {
        foreach ($this->status as $key=>$val){
            $this->status[$key] = (int)$val;
        }
        parent::afterValidate(); // TODO: Change the autogenerated stub
    }

    public function attributeLabels()
    {
        return [
            'datefrom' => 'Период',
            'dateto' => 'Период',
        ];
    }

    public function GetList()
    {
        $datefrom = strtotime($this->datefrom . " 00:00:00");
        $dateto = strtotime($this->dateto . " 23:59:59");
        if ($datefrom < $dateto - 365 * 86400) {
            $datefrom = $dateto - 365 * 86400;
        }

        $query = (new Query())->select([
            'o.ID',
            'o.DateAdd',
            'o.DateOplata',
            'o.SumOrder',
            'o.EmailTo',
            'o.SmsTo',
            'o.StateOrder',
            'o.IdPaySchet',
        ])
            ->from('order_pay AS o')
            ->where(['o.IdDeleted' => 0])
            ->andWhere('o.DateAdd BETWEEN :DATEFROM AND :DATETO', [':DATEFROM' => $datefrom, ':DATETO' => $dateto]);

        $isAdmin = UserLk::IsAdmin(Yii::$app->user);
        if (!$isAdmin) {
            $this->partner = UserLk::getPartnerId(Yii::$app->user);
        }

        if ($this->partner > 0) {
            $query->andWhere(['o.IdPartner' => $this->partner]);
        }
        if ($this->status[0] >= 0) {
            $query->andWhere(['in', 'o.StateOrder', $this->status]);
        }

        return $query->all();
    }

    public function GetError()
    {
        $err = $this->firstErrors;
        $err = array_pop($err);
        return $err;
    }

    public function CancelOrder($id)
    {
        $isAdmin = UserLk::IsAdmin(Yii::$app->user);
        if (!$isAdmin) {
            $this->partner = UserLk::getPartnerId(Yii::$app->user);
            $order = OrderPay::findOne(['ID' => $id, 'IdPartner' => $this->partner]);
        } else {
            $order = OrderPay::findOne(['ID' => $id]);
        }

        if ($order) {
            Yii::$app->db->createCommand()->update(
                'order_pay',
                ['StateOrder' => 2],
                '`ID` = :ID',
                ['ID' => $id]
            )->execute();
            return ['status' => 1, 'message' => ''];
        }
        return ['status' => 0, 'message' => 'Заказ не найден'];
    }

    public function Resend($id)
    {
        $isAdmin = UserLk::IsAdmin(Yii::$app->user);
        if (!$isAdmin) {
            $this->partner = UserLk::getPartnerId(Yii::$app->user);
            $order = OrderPay::findOne(['ID' => $id, 'IdPartner' => $this->partner]);
        } else {
            $order = OrderPay::findOne(['ID' => $id]);
        }

        if ($order) {
            $notif = new OrderNotif();
            $notif->SendNotif($order);
            return ['status' => 1, 'message' => ''];
        }
        return ['status' => 0, 'message' => 'Заказ не найден'];
    }
}