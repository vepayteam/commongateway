<?php

namespace app\models\partner\stat;

use app\models\partner\UserLk;
use app\models\TU;
use app\services\payment\models\active_query\PaySchetQuery;
use app\services\payment\models\PaySchet;
use app\services\payment\models\PaySchetAdditional;
use app\services\payment\models\repositories\CurrencyRepository;
use Yii;
use yii\base\Model;
use yii\data\Pagination;
use yii\db\Expression;
use yii\db\Query;

class PayShetStat extends Model
{
    public $IdPart = 0;
    public $idParts = [];
    public $usluga = [];
    public $TypeUslug = [];
    public $idBank = [];
    public $Extid = '';
    public $id = 0;
    public $summpayFrom = 0;
    public $summpayTo = 0;
    public $status = [];
    public $params = [];
    public $datefrom = '';
    public $dateto = '';

    public function rules()
    {
        return [
            [['IdPart'], 'integer'],
            [['id'], 'safe'],
            [['summpayFrom', 'summpayTo'], 'number'],
            [['Extid'], 'string'],
            [['datefrom', 'dateto'], 'date', 'format' => 'php:d.m.Y H:i'],
            [['datefrom', 'dateto'], 'required'],
            [['usluga', 'status', 'TypeUslug', 'idBank', 'idParts'], 'each', 'rule' => ['integer']],
            [['params'], 'each', 'rule' => ['string']],
        ];
    }

    public function validateParams()
    {
        foreach ($this->params as $key => $value) {
            if (in_array($key, [0, 'bankName', 'operationNumber', 'cardMask',], true) === true) {
                if (is_string($value) === false) {
                    $this->addError('params', $key . ' value is incorrect.');
                    return;
                }
            } elseif (in_array($key, ['fullSummpayFrom', 'fullSummpayTo'], true) === true) {
                if (is_numeric($value) === false) {
                    $this->addError('params', $key . ' value is incorrect.');
                    return;
                }
            }

            $this->addError('params', $key . 'value is incorrect');
            return;
        }
    }

    //после валидации - преобразуем данные в int - для запроса в бд.
    public function afterValidate()
    {
        foreach ($this->usluga as $key => $val) {
            $this->usluga[$key] = (int)$val;
        }
        foreach ($this->status as $key => $val) {
            $this->status[$key] = (int)$val;
        }
        foreach ($this->TypeUslug as $key => $val) {
            $this->TypeUslug[$key] = (int)$val;
        }
        parent::afterValidate(); // TODO: Change the autogenerated stub
    }

    public function attributeLabels()
    {
        return [
            'datefrom' => 'Период',
            'dateto' => 'Период',
            'summpayFrom' => 'Сумма платежа (от)',
            'summpayTo' => 'Сумма платежа (до)',
            'id' => 'Идентификатор',
            'usluga' => 'Услуга',
        ];
    }

    /**
     * Список платежей
     *
     * @param bool $IsAdmin
     * @param int $offset
     * @param int|null $limit
     * @param bool $forList
     *
     * @return array
     */
    public function getList(bool $IsAdmin, int $offset = 0, ?int $limit = 100, bool $forList = false): array
    {
        $before = microtime(true);

        if (!$forList) {

            try {

                if ($IsAdmin) {
                    $IdPart = !empty($this->idParts) ? $this->idParts : [$this->IdPart];
                } else {
                    $IdPart = [UserLk::getPartnerId(Yii::$app->user)];
                }
                $IdPart = array_filter($IdPart, static function ($v) {
                    return (int) $v > 0;
                });

                $query = PaySchetAdditional::find()
                                           ->select([
                                               'ps.ID',
                                               'ps.IdOrg',
                                               'ps.Extid',
                                               'ps.RRN',
                                               'ps.CardNum',
                                               'ps.CardHolder',
                                               'ps.BankName',
                                               'ps.IdKard',//
                                               'qp.NameUsluga',
                                               'ps.SummPay',
                                               'ps.CurrencyId',
                                               'ps.ComissSumm',
                                               'ps.MerchVozn',
                                               'ps.BankComis',
                                               'ps.DateCreate',
                                               'ps.DateOplat',
                                               'ps.PayType',
                                               'ps.ExtBillNumber',
                                               'ps.Status',
                                               'ps.Period',
                                               'u.`UserDeviceType`',
                                               'ps.IdKard',
                                               'ps.CardType',
                                               'ps.QrParams',
                                               'ps.IdShablon',
                                               'ps.IdQrProv',
                                               'ps.IdAgent',
                                               'qp.IsCustom',
                                               'ps.ErrorInfo',
                                               'ps.BankName',
                                               'ps.CountryUser',
                                               'ps.CityUser',
                                               'qp.ProvVoznagPC',
                                               'qp.ProvVoznagMin',
                                               'qp.ProvComisPC',
                                               'qp.ProvComisMin',
                                               'ps.sms_accept',
                                               'qp.NameUsluga',
                                               'ps.Dogovor',
                                               'ps.FIO',
                                               'ps.RCCode',
                                               'ps.IdOrg',
                                               'ps.RRN',
                                               'ps.CardNum',
                                               'ps.CardHolder',
                                               'ps.BankName',
                                               'c.CardNumber',
                                               'ps.IdKard',//IdCard->cards->IdPan->pan_token->encryptedPan
                                               'b.Name as BankName',
                                           ])
                                           ->from('`pay_schet` AS ps')
                                           ->leftJoin('`banks` AS b', 'ps.Bank = b.ID')
                                           ->leftJoin('`cards` AS c', 'ps.IdKard = c.ID')
                                           ->leftJoin('`uslugatovar` AS qp', 'ps.IdUsluga = qp.ID')
                                           ->leftJoin('`user` AS u', 'u.`ID` = ps.`IdUser`')
                                           ->where('ps.DateCreate BETWEEN :DATEFROM AND :DATETO', [
                                               ':DATEFROM' => strtotime($this->datefrom . ":00"),
                                               ':DATETO'   => strtotime($this->dateto . ":59")
                                           ]);

                if (!empty($IdPart)) {
                    $query->andWhere(['qp.IDPartner' => $this->idParts]);
                }
                $query = $this->handleParamsQuery($query);
                if (count($this->status) > 0) {
                    $query->andWhere(['in', 'ps.Status', $this->status]);
                }
                if (count($this->usluga) > 0) {
                    $query->andWhere(['in', 'ps.IdUsluga', $this->usluga]);
                }
                if (count($this->TypeUslug) > 0) {
                    $query->andWhere(['in', 'qp.IsCustom', $this->TypeUslug]);
                }
                if ($this->id > 0) {
                    $query->andWhere('ps.ID = :ID', [':ID' => $this->id]);
                }
                if (!empty($this->Extid)) {
                    $query->andWhere('ps.Extid = :EXTID', [':EXTID' => $this->Extid]);
                }

                if (is_numeric($this->summpayFrom) && is_numeric($this->summpayTo) && is_numeric($this->summpayTo) && $this->summpayTo > 0.0) {
                    $query->andWhere(['between', 'ps.SummPay', round($this->summpayFrom * 100.0), round($this->summpayTo * 100.0)]);
                } elseif (is_numeric($this->summpayFrom)) {
                    $query->andWhere(['>=', 'ps.SummPay', round($this->summpayFrom * 100.0)]);
                } elseif (is_numeric($this->summpayTo) && $this->summpayTo > 0.0) {
                    $query->andWhere(['<=', 'ps.SummPay', round($this->summpayTo * 100.0)]);
                }
                if (count($this->params) > 0) {
                    if (!empty($this->params[0])) {
                        $query->andWhere(['like', 'ps.Dogovor', $this->params[0]]);
                    }
                }

                $cnt = $sumPay = $sumComis = $voznagps = $bankcomis = 0;

                if ($limit === null) {
                    /** @var PaySchet[] $allres */
                    $allres = $query->cache(10)->all();

                    foreach ($allres as $row) {
                        $sumPay += $row->SummPay;
                        $sumComis += $row->ComissSumm;
                        $voznagps += $row->ComissSumm - $row->BankComis + $row->MerchVozn;
                        $bankcomis += $row->BankComis;
                        $cnt++;
                    }
                } else {

                    if ($offset > 0) {
                        $query->offset($offset);
                    }
                    $query->orderBy('`ID` DESC')->limit($limit);
                }

                /** @var PaySchet[] $res */
                $res = $query->cache(3)->all();

                $ret = [];
                foreach ($res as $row) {
                    $row->VoznagSumm = $row->ComissSumm - $row->BankComis + $row->MerchVozn;

                    $ret[] = $row;
                }
                $after = microtime(true);
                $delta = $after - $before;
                Yii::warning('Profiling delta ' . self::class . __METHOD__ . ': ' . $delta);
            } catch (\Exception $e) {
                Yii::warning("getList Error: " . $e->getMessage() . ' file: ' . $e->getFile() . ' line: ' . $e->getLine());
            } catch (\Throwable $e) {
                Yii::warning("getList Error: " . $e->getMessage() . ' file: ' . $e->getFile() . ' line: ' . $e->getLine());
            } finally {
                Yii::warning("getList Error FINALLY ");
            }

            return ['data' => $ret, 'cnt' => $cnt, 'cntpage' => $limit, 'sumpay' => $sumPay, 'sumcomis' => $sumComis, 'bankcomis' => $bankcomis, 'voznagps' => $voznagps];

        } else {

            $IdPart = $IsAdmin ? $this->IdPart : UserLk::getPartnerId(Yii::$app->user);
            $select = [
                'COUNT(ps.ID) as count',
                'SUM(ps.SummPay) AS SummPay',
                'SUM(ps.ComissSumm) AS ComissSumm',
                //'SUM(ps.ComissSumm - ps.BankComis + ps.MerchVozn) AS VoznagPS',
                'SUM(ps.BankComis) AS BankComis',
                'SUM(ps.MerchVozn) AS MerchVozn',
            ];
            $query = $this->buildQuery($select, $IdPart);

            $cnt = $sumPay = $sumComis = $voznagps = $bankcomis = 0;

            /** @var PaySchet $res */
            $res = $query->one();

            $sumPay = $res->SummPay;
            $sumComis = $res->ComissSumm;
            $summBankComis = $res->BankComis;
            $summMerchVozn = $res->MerchVozn;
            $voznagps = $sumComis - $summBankComis + $summMerchVozn;

            $bankcomis = $res->BankComis;
            $cnt = $res->count;

            /**
             * Подсчет уже возвращенной суммы через subQuery, возможно костыльное решение, тк вся функция очень страшная
             */
            $refundAmountSubQuery = (new Query())
                ->from('pay_schet refund_ps')
                ->select('SUM(refund_ps.SummPay)')
                ->andWhere('refund_ps.RefundSourceId=ps.ID');

            $select = [
                'ps.ID',
                'ps.IdOrg',
                'ps.Extid',
                'ps.RRN',
                'c.CardNumber',
                'ps.CardNum',
                'ps.CardHolder',
                'ps.IdKard',//
                'qp.NameUsluga',
                'ps.SummPay',
                'ps.CurrencyId',
                'ps.ComissSumm',
                'ps.MerchVozn',
                'ps.BankComis',
                'ps.DateCreate',
                'ps.DateOplat',
                'ps.PayType',
                'ps.ExtBillNumber',
                'ps.Status',
                'ps.Period',
                'u.`UserDeviceType`',
                'ps.CardType',
                'ps.QrParams',
                'ps.IdShablon',
                'ps.IdQrProv',
                'ps.IdAgent',
                'qp.IsCustom',
                'ps.ErrorInfo',
                'ps.CountryUser',
                'ps.CityUser',
                'qp.ProvVoznagPC',
                'qp.ProvVoznagMin',
                'qp.ProvComisPC',
                'qp.ProvComisMin',
                'ps.sms_accept',
                'ps.Dogovor',
                'ps.FIO',
                'ps.RCCode',
                'b.Name as BankName',
                'RefundAmount' => $refundAmountSubQuery,
            ];
            $query = $this->buildQuery($select, $IdPart);

            if ($limit) {
                if ($offset > 0) {
                    $query->offset($offset);
                }
                $query->orderBy('ID DESC')->limit($limit);
            }

            $res = $query->all();

            if ($limit === null) {

                $data = self::mapQueryPaymentResult($res);

            } else {
                $data = [];

                foreach ($res as $row) {
                    $row->VoznagSumm = $row->ComissSumm - $row->BankComis + $row->MerchVozn;
                    $row->Currency = $row->CurrencyId ? CurrencyRepository::getCurrencyCodeById($row->CurrencyId)->Code : null;
                    $row->RefundAmount = $row['RefundAmount'] ?? 0;
                    $row->RemainingRefundAmount = $row->SummPay + $row->ComissSumm - $row->RefundAmount;
                    $data[] = $row;
                }
            }

            $refundTotalPaymentSum = 0;
            $refundTotalClientCommission = 0;
            $refundTotalBankCommission = 0;
            $refundTotalAward = 0;
            foreach ($data as &$item) {
                if (
                    intval($item->Status) === PaySchet::STATUS_REFUND_DONE ||
                    intval($item->Status) === PaySchet::STATUS_CANCEL
                ) {
                    $refundTotalPaymentSum += (int) $item->SummPay;
                    $refundTotalClientCommission += (int) $item->ComissSumm;
                    $refundTotalBankCommission += (int) $item->BankComis;
                    $refundTotalAward += (int) $item->VoznagSumm;

                    if (intval($item->Status) === PaySchet::STATUS_REFUND_DONE) {
                        /**
                         * Для транзакций в статусе refund/reverse сумма вознаграждения должна быть 0
                         */
                        $item->VoznagSumm = 0;
                    } else {
                        $refundTotalAward += (int) $item->VoznagSumm;
                    }
                }
            }

            /**
             * Из суммы всех платежей вычитаем возвраты
             */
            $resultPaymentSum = $sumPay - ($refundTotalPaymentSum * 2);
            $resultClientCommission = $sumComis - ($refundTotalClientCommission * 2);
            $resultBankCommission = $bankcomis - ($refundTotalBankCommission * 2);
            $resultAward = $voznagps - ($refundTotalAward);

            $pagination = new Pagination([
                'totalCount' => $query->count(),
                'pageSize'   => $limit,
            ]);

            return [
                'data'       => $data,
                'pagination' => $pagination,
                'cnt'        => $cnt,
                'cntpage'    => $limit,
                'sumpay'     => $resultPaymentSum,
                'sumcomis'   => $resultClientCommission,
                'bankcomis'  => $resultBankCommission,
                'voznagps'   => $resultAward
            ];
        }
    }

    /**
     * @param array $res
     *
     * @return \Generator
     */
    private static function mapQueryPaymentResult(array $res): \Generator
    {
        foreach ($res as $row) {

            $row->VoznagSumm = $row->ComissSumm - $row->BankComis + $row->MerchVozn;
            $row->Currency = $row->CurrencyId ? CurrencyRepository::getCurrencyCodeById($row->CurrencyId)->Code : null;
            $row->RefundAmount = $row->RefundAmount ?? 0;
            $row->RemainingRefundAmount = $row->SummPay + $row->ComissSumm - $row->RefundAmount;

            yield $row;
        }
    }

    /**
     * @param $select
     * @param $IdPart
     * @return Query
     */
    private function buildQuery($select, $IdPart)
    {
        $query = PaySchetAdditional::find();
        $query
            ->select($select)
            ->from('pay_schet AS ps FORCE INDEX(DateCreate_idx)')
            ->leftJoin('banks AS b', 'ps.Bank = b.ID')
            ->leftJoin('cards AS c', 'ps.IdKard = c.ID')
            ->leftJoin('uslugatovar AS qp', 'ps.IdUsluga = qp.ID')
            ->leftJoin('user AS u', 'u.ID = ps.IdUser')
            ->where('ps.DateCreate BETWEEN :DATEFROM AND :DATETO', [
                ':DATEFROM' => strtotime($this->datefrom . ":00"),
                ':DATETO' => strtotime($this->dateto . ":59")
            ]);

        $query->andFilterWhere(['qp.IDPartner' => $this->idParts]);
        $query->andFilterWhere(['ps.ID' => $this->explode($this->id)]);
        $query->andFilterWhere(['ps.Extid' => $this->explode($this->Extid)]);
        $query->andFilterWhere(['ps.Bank' => $this->idBank]);

        if ($IdPart > 0) {
            $query->andWhere('qp.IDPartner = :IDPARTNER', [':IDPARTNER' => $IdPart]);
        }
        if (count($this->status) > 0) {
            if (in_array(PaySchet::STATUS_WAITING, $this->status, true)) {
                $this->status = array_unique(
                    array_merge($this->status, [PaySchet::STATUS_NOT_EXEC, PaySchet::STATUS_WAITING_CHECK_STATUS])
                );
            }
            $query->andWhere(['in', 'ps.Status', $this->status]);
        }
        if (count($this->usluga) > 0) {
            $query->andWhere(['in', 'ps.IdUsluga', $this->usluga]);
        }
        if (count($this->TypeUslug) > 0) {
            $query->andWhere(['in', 'qp.IsCustom', $this->TypeUslug]);
        }
        $query = $this->handleParamsQuery($query);
        if (is_numeric($this->summpayFrom) && is_numeric($this->summpayTo) && $this->summpayTo) {
            $query->andWhere(['between', 'ps.SummPay', round($this->summpayFrom * 100.0), round($this->summpayTo * 100.0)]);
        } elseif (is_numeric($this->summpayFrom)) {
            $query->andWhere(['>=', 'ps.SummPay', round($this->summpayFrom * 100.0)]);
        } elseif (is_numeric($this->summpayTo)) {
            $query->andWhere(['<=', 'ps.SummPay', round($this->summpayTo * 100.0)]);
        }

        return $query;
    }

    private function handleParamsQuery($query): PaySchetQuery
    {
        if (count($this->params) > 0) {
            if (!empty($this->params[0])) {
                $query->andWhere(['like', 'ps.Dogovor', $this->params[0]]);
            }
            if (isset($this->params['fullSummpayFrom']) && isset($this->params['fullSummpayTo'])
                && is_numeric($this->params['fullSummpayFrom']) && is_numeric($this->params['fullSummpayTo'])) {
                $query->andWhere([
                    'between', new Expression('(`ps`.`SummPay` + `ps`.`ComissSumm`)'),
                    round($this->params['fullSummpayFrom'] * 100.0), round($this->params['fullSummpayTo'] * 100.0)
                ]);
            } elseif (isset($this->params['fullSummpayFrom']) && is_numeric($this->params['fullSummpayFrom'])) {
                $query->andWhere(['>=', new Expression('(`ps`.`SummPay` + `ps`.`ComissSumm`)'),
                    round($this->params['fullSummpayFrom'] * 100.0)]);
            } elseif (isset($this->params['fullSummpayTo']) && is_numeric($this->params['fullSummpayTo'])) {
                $query->andWhere(['<=', new Expression('(`ps`.`SummPay` + `ps`.`ComissSumm`)'),
                    round($this->params['fullSummpayTo'] * 100.0)]);
            }
            if (array_key_exists('cardMask', $this->params) && $this->params['cardMask'] !== '') {
                $this->params['cardMask'] = trim($this->params['cardMask'], '; \t\n\r');
                if (strpos($this->params['cardMask'], '*') !== false) {
                    $regexp = str_replace(['*'], ['(\d|\*)'], implode('|', $this->explode($this->params['cardMask'])));
                    $query->andWhere(['REGEXP', 'c.CardNumber', $regexp]);
                } else {
                    $query->andWhere(['like', 'c.CardNumber', $this->params['cardMask'] . '%', false]);
                }
            }
            if (array_key_exists('bankName', $this->params) && $this->params['bankName'] !== '') {
                $query->andWhere(['like', 'b.Name', $this->params['bankName']]);
            }
            if (array_key_exists('operationNumber', $this->params) && $this->params['operationNumber'] !== '') {
                $query->andFilterWhere(['ps.ExtBillNumber' => $this->explode($this->params['operationNumber'])]);
            }
        }

        return $query;
    }

    public function GetError()
    {
        $err = $this->firstErrors;
        $err = array_pop($err);
        return $err;
    }

    /**
     * Сумма перечислений в МФО
     * @param int $TypePerech
     * @return integer
     * @throws \yii\db\Exception
     */
    public function GetSummPepechislen($TypePerech)
    {
        $summPerechisl = Yii::$app->db->createCommand("
            SELECT
                SUM(`SumOp`)
            FROM
                `vyvod_reestr`
            WHERE
                `IdPartner` = :IDMFO
                AND `DateFrom` >= :DATEFROM
                AND `DateTo` <= :DATETO
                AND `StateOp` = 1
                AND `TypePerechisl` = :TYPEPERECH
            ORDER BY `DateTo` DESC
            LIMIT 1
        ", [
            ':IDMFO' => $this->IdPart,
            ':DATEFROM' => strtotime($this->datefrom . ":00"),
            ':DATETO' => strtotime($this->dateto . ":59"),
            ':TYPEPERECH' => $TypePerech
        ])->queryScalar();

        return (double)$summPerechisl;
    }

    /**
     * Сумма возвращенных платежей
     * @return integer
     * @throws \yii\db\Exception
     */
    public function GetSummVozvrat()
    {
        $summVozvr = Yii::$app->db->createCommand("
            SELECT
                SUM(ps.`SummPay`)
            FROM
                `pay_schet` AS ps
                LEFT JOIN `uslugatovar` AS ut ON ps.IdUsluga = ut.ID
            WHERE
                ut.IDPartner = :IDMFO
                AND ps.`DateCreate` BETWEEN :DATEFROM AND :DATETO
                AND `Status` = 3
                AND ut.`IsCustom` IN (" . implode(',', TU::InAll()) . ")
        ", [
            ':IDMFO' => $this->IdPart,
            ':DATEFROM' => strtotime($this->datefrom . ":00"),
            ':DATETO' => strtotime($this->dateto . ":59")])->queryScalar();

        return (double)$summVozvr;
    }

    private function explode(string $id): ?array
    {
        $id = trim($id, ' \t\n\r');
        return $id ? array_filter(explode(';', $id)) : null;
    }

}